-- MySQL Script generated by MySQL Workbench
-- Thu Feb 18 18:33:41 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mycampus
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mycampus
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mycampus` DEFAULT CHARACTER SET utf8 ;
USE `mycampus` ;

-- -----------------------------------------------------
-- Table `mycampus`.`Courses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Courses` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `subject` CHAR(4) NOT NULL,
  `code` CHAR(5) NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Levels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Levels` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `level` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Course_Levels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Course_Levels` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NOT NULL,
  `level_id` INT NOT NULL,
  INDEX `fk_Course_Levels_Courses_idx` (`course_id` ASC),
  INDEX `fk_Course_Levels_Levels_idx` (`level_id` ASC),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_Course_Levels_Courses`
    FOREIGN KEY (`course_id`)
    REFERENCES `mycampus`.`Courses` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Course_Levels_Levels`
    FOREIGN KEY (`level_id`)
    REFERENCES `mycampus`.`Levels` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Semesters`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Semesters` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `year` YEAR NOT NULL,
  `term` CHAR(2) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Sections`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Sections` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NOT NULL,
  `type_id` INT NOT NULL,
  `semester_id` INT NOT NULL,
  `section` CHAR(3) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Sections_Type_idx` (`type_id` ASC),
  INDEX `fk_Sections_Courses_idx` (`course_id` ASC),
  INDEX `fk_Sections_Semesters_idx` (`semester_id` ASC),
  CONSTRAINT `fk_Sections_Type`
    FOREIGN KEY (`type_id`)
    REFERENCES `mycampus`.`Type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Sections_Courses`
    FOREIGN KEY (`course_id`)
    REFERENCES `mycampus`.`Courses` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Sections_Semesters`
    FOREIGN KEY (`semester_id`)
    REFERENCES `mycampus`.`Semesters` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Section_Availability`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Section_Availability` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `section_id` INT NOT NULL,
  `capacity` INT NOT NULL,
  `actual` INT NOT NULL,
  `remaining` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Section_Availability_Sections_idx` (`section_id` ASC),
  CONSTRAINT `fk_Section_Availability_Sections`
    FOREIGN KEY (`section_id`)
    REFERENCES `mycampus`.`Sections` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Instructors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Instructors` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Section_Instructors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Section_Instructors` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `section_id` INT NOT NULL,
  `instructor_id` INT NOT NULL,
  INDEX `fk_Section_Instructors_Sections_idx` (`section_id` ASC),
  INDEX `fk_Section_Instructors_Instructors_idx` (`instructor_id` ASC),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_Section_Instructors_Sections`
    FOREIGN KEY (`section_id`)
    REFERENCES `mycampus`.`Sections` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Section_Instructors_Instructors`
    FOREIGN KEY (`instructor_id`)
    REFERENCES `mycampus`.`Instructors` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Sessions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Sessions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `section_id` INT NOT NULL,
  `week` INT NOT NULL DEFAULT 0,
  `day` CHAR(1) NULL,
  `location` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Sessions_Sections_idx` (`section_id` ASC),
  CONSTRAINT `fk_Sessions_Sections`
    FOREIGN KEY (`section_id`)
    REFERENCES `mycampus`.`Sections` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mycampus`.`Session_Period`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mycampus`.`Session_Period` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `session_id` INT NOT NULL,
  `start_date` DATE NULL,
  `finish_date` DATE NULL,
  `start_time` DATE NULL,
  `finish_time` DATE NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Session_Period_Sessions_idx` (`session_id` ASC),
  CONSTRAINT `fk_Session_Period_Sessions`
    FOREIGN KEY (`session_id`)
    REFERENCES `mycampus`.`Sessions` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mycampus`.`Courses`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Courses` (`subject`, `code`, `title`) VALUES ('ENGR', '1200U', '\"Intro. to Programming\"');
INSERT INTO `mycampus`.`Levels` (`level`) VALUES ('Undergraduate');
INSERT INTO `mycampus`.`Course_Levels` (`course_id`, `level_id`) VALUES (1, 1);
INSERT INTO `mycampus`.`Type` (`type`) VALUES ('Lecture');
INSERT INTO `mycampus`.`Semesters` (`year`, `term`) VALUES (2016, '01');
INSERT INTO `mycampus`.`Sections` (`course_id`, `type_id`, `semester_id`, `section`) VALUES (1, 1, 1, '001');
INSERT INTO `mycampus`.`Instructors` (`name`) VALUES ('Dr. Ian');
INSERT INTO `mycampus`.`Section_Instructors` (`section_id`, `instructor_id`) VALUES (1, 1);
COMMIT;

-- Find if course exists in table
SELECT id
FROM Courses
WHERE subject = 'ENGR' AND code = '1200U';

select id
FROM Levels
WHERE


SELECT id
FROM Semesters
WHERE year = '2016' AND



-- Type Semester Instructor Level insert

-- Level
INSERT INTO Levels (level)
SELECT * FROM (SELECT 'Undergraduate') AS temp
WHERE NOT EXISTS (
    SELECT id FROM Levels WHERE level = 'Undergraduate'
) LIMIT 1;

-- Semester
INSERT INTO Semesters (year, term)
SELECT * FROM (SELECT 2016, '01') AS temp
WHERE NOT EXISTS (
    SELECT id FROM Semesters WHERE year = 2016 AND term = '01'
) LIMIT 1;

-- Instructor
INSERT INTO Instructors (name)
SELECT * FROM (SELECT 'Dr. Ian') AS temp
WHERE NOT EXISTS (
    SELECT id FROM Instructors WHERE name = 'Dr. Ian'
) LIMIT 1;

-- Type
INSERT INTO Type (type)
SELECT * FROM (SELECT 'Lecture') AS temp
WHERE NOT EXISTS (
    SELECT id FROM Type WHERE type = 'Lecture'
) LIMIT 1;

-- Insert into course table,
INSERT INTO Courses (subject, code, title)
SELECT * FROM (SELECT 'ENGR', '1200U', 'Intro. to Programming') AS tmp
WHERE NOT EXISTS (
    SELECT subject FROM Courses WHERE subject = 'ENGR' AND code = '1200U'
) LIMIT 1;



-- -----------------------------------------------------
-- Data for table `mycampus`.`Levels`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Levels` (`level`) VALUES ('Undergraduate');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mycampus`.`Type`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Type` (`type`) VALUES ('Lecture');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mycampus`.`Semesters`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Semesters` (`year`, `term`) VALUES (2016, '01');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mycampus`.`Sections`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Sections` (`course_id`, `type_id`, `semester_id`, `section`) VALUES (1, 1, 1, '001');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mycampus`.`Instructors`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Instructors` (`name`) VALUES ('Dr. Ian');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mycampus`.`Section_Instructors`
-- -----------------------------------------------------
START TRANSACTION;
USE `mycampus`;
INSERT INTO `mycampus`.`Section_Instructors` (`section_id`, `instructor_id`) VALUES (1, 1);

COMMIT;
